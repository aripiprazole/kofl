//expression ::= literal | unary | binary | grouping ;
//
//literal ::= NUMBER | STRING | "true" | "false" ;
//grouping ::= "(" expression ")" ;
//unary ::= ("-" | "!") expression ;
//binary ::= expression operator expression ;
//operator ::= "=="
//    | "!=" | "<" | "<=" | ">" | ">="
//    | "+"  | "-"  | "*" | "/" ;

program ::= decl* EOF ;

decl ::= valDecl | varDecl | stmt ;

valDecl ::= "val" IDENTIFIER "=" expression ";" ;
varDecl ::= "var" IDENTIFIER "=" expression ";" ;

stmt ::= exprStmt
    | whileStmt
    | block ;

exprStmt ::= expression ";" ;

whileStmt ::= "while" expression block;

block ::= "{" decl* "}" ;

expression ::= assignment | if | func;

logic_or ::= logic_and ( "or" logic_and )*;
logic_and ::= equality ( "and " equality )*;

assignment ::= IDENTIFIER "=" assignment
    | logic_or ;

if ::= "if" expression block ( "else" block ) ? ;
func ::= "func" IDENTIFIER "(" parameters? ")" block ;

parameters ::= IDENTIFIER ( "," IDENTIFIER ) * ;

equality ::= comparison ( ( "!=" | "==" ) comparison)* ;
comparison ::= term ( ( ">" | ">=" | "<" | "<=" ) term)* ;
term ::= factor ( ( "-" | "+" ) factor)* ;
factor ::= unary ( ( "/" | "*" ) unary)* ;
unary ::= ( "!" | "-" ) unary | call;

call ::= primary ( "(" arguments? ")" )* ;
arguments ::= expression ( "," expression )*;

primary ::= NUMBER | STRING
    | "true" | "false"
    | "(" expression ")"
    | IDENTIFIER ;
