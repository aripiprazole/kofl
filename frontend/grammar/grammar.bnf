program ::= globalDecl* EOF ;

globalDecl ::= decl | typeDecl

decl ::= valDecl | varDecl  | func;

valDecl ::= "val" IDENTIFIER "=" expression ";" ;
varDecl ::= "var" IDENTIFIER "=" expression ";" ;
typeDecl ::= "typedef" IDENTIFIER "=" type;

type ::= "struct" ( ( "(" parameters ")" ) | ";" ) ;

stmt ::= exprStmt
    | returnStmt
    | whileStmt
    | decl
    | block ;

exprStmt ::= expression ";" ;

whileStmt ::= "while" expression block;
returnStmt ::= "return" expression ? ";" ;

block ::= "{" stmt* "}" ;

expression ::= assignment | if | func;

logic_or ::= logic_and ( "or" logic_and )*;
logic_and ::= equality ( "and " equality )*;

assignment ::= ( call "." ) ? IDENTIFIER "=" assignment
    | logic_or ;

if ::= "if" expression block ( "else" block ) ? ;
func ::= "func" IDENTIFIER "(" parameters? ")" ( block | "=" expression ";" ) ";";

parameters ::= IDENTIFIER ( "," IDENTIFIER ) * ;

equality ::= comparison ( ( "!=" | "==" ) comparison)* ;
comparison ::= term ( ( ">" | ">=" | "<" | "<=" ) term)* ;
term ::= factor ( ( "-" | "+" ) factor)* ;
factor ::= unary ( ( "/" | "*" ) unary)* ;
unary ::= ( "!" | "-" ) unary | call;

call ::= primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments ::= expression ( "," expression )*;

primary ::= NUMBER | STRING
    | "true" | "false"
    | "(" expression ")"
    | IDENTIFIER ;
